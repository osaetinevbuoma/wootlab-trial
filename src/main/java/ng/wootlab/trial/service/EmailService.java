package ng.wootlab.trial.service;

import ng.wootlab.trial.model.Orders;
import org.springframework.core.env.Environment;
import org.springframework.core.io.ClassPathResource;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Properties;

@Service
public class EmailService {
    private final AuthenticationService authenticationService;
    private final Environment environment;
    private final HttpServletRequest httpServletRequest;
    private final TemplateEngine templateEngine;

    public EmailService(AuthenticationService authenticationService, Environment environment,
                        HttpServletRequest httpServletRequest, TemplateEngine templateEngine) {
        this.authenticationService = authenticationService;
        this.environment = environment;
        this.httpServletRequest = httpServletRequest;
        this.templateEngine = templateEngine;
    }

    /**
     * Java mail sender.
     *
     * @return
     */
    private JavaMailSenderImpl mailSender() {
        JavaMailSenderImpl sender = new JavaMailSenderImpl();

        sender.setHost(environment.getProperty("spring.mail.host"));
        sender.setPort(Integer.parseInt(environment.getProperty("spring.mail.port")));
        sender.setUsername(environment.getProperty("spring.mail.username"));
        sender.setPassword(environment.getProperty("spring.mail.password"));
        sender.setProtocol(environment.getProperty("spring.mail.protocol"));

        Properties properties = sender.getJavaMailProperties();
        properties.setProperty("mail.smtp.auth", "true");
        properties.setProperty("mail.smtp.starttls.enable", "true");
        properties.setProperty("mail.smtp.connectiontimeout", String.valueOf(5000));
        properties.setProperty("mail.smtp.timeout", String.valueOf(5000));
        properties.setProperty("mail.smtp.writetimeout", String.valueOf(5000));
        properties.setProperty("mail.transport.protocol", "smtp");
        properties.setProperty("mail.account.from", "Wootlab Marketplace <no-reply@wootlab.com>");

        return sender;
    }

    private MimeMessageHelper mimeMessageHelper(JavaMailSenderImpl sender, MimeMessage message,
                                                String emailAddress, String subject,
                                                String htmlContent, List<Orders> orders)
            throws MessagingException {
        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
        helper.setFrom(sender.getJavaMailProperties().getProperty("mail.account.from"));
        helper.setTo(emailAddress);
        helper.setSubject(subject);
        helper.setText(htmlContent, true);
        helper.addInline("logo.png", new ClassPathResource("static/images/logo.png"),
                "image/png");
        orders.forEach(order -> {
            try {
                helper.addInline("orderImg_" + order.getId(),
                        new ClassPathResource("static/images" + order.getProductImageUrl()),
                        "image/jpg");
            } catch (MessagingException e) {
                e.printStackTrace();
            }
        });

        return helper;
    }

    /**
     * Send an order confirmation email to the customer.
     * The email content is generated by passing the list of orders to an email template that is
     * formatted to display with its own style attributes in the customer's email.
     *
     * @param orders list of orders
     */
    public void sendOrderConfirmationEmail(List<Orders> orders) {
        try {
            JavaMailSenderImpl sender = mailSender();

            // URL for "Continue Shopping" button.
            String url = String.format("%s://%s:%d/products", httpServletRequest.getScheme(),
                    httpServletRequest.getServerName(), httpServletRequest.getServerPort());

            // Prepare the evaluation context
            Context context = new Context();
            context.setVariable("orders", orders);
            context.setVariable("url", url);
            context.setVariable("logo", "logo.png");
            orders.forEach(order -> context.setVariable("orderImg_" + order.getId(),
                    order.getProductImageUrl()));

            // Create the HTML body using Thymeleaf
            String htmlContent = templateEngine.process("email/order_confirmation_template.html",
                    context);

            // Customer email address
            String emailAddress = authenticationService.getAuthenticatedCustomer().getEmail();

            // Prepare message using a Spring helper
            MimeMessage message = sender.createMimeMessage();
            MimeMessageHelper helper = mimeMessageHelper(sender, message, emailAddress,
                    "Order Confirmation", htmlContent, orders);

            sender.send(message);
        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
}
